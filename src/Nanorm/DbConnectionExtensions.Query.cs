// DO NOT EDIT
// THIS FILE IS GENERATED BY DbConnectionExtensions.Query.tt

#if NET7_0_OR_GREATER
using System.CodeDom.Compiler;
using Nanorm;

namespace System.Data.Common;

/// <summary>
/// Extension methods for <see cref="DbConnection"/> from the <c>Nanorm</c> package.
/// </summary>
[GeneratedCode("TextTemplatingFileGenerator", "1.0.0.0")]
public static partial class DbConnectionExtensions
{
    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);


        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);


        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1, 
        DbPlaceholderParameter param2
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);


        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1,
        DbPlaceholderParameter param2,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);


        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1, 
        DbPlaceholderParameter param2, 
        DbPlaceholderParameter param3
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);


        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1,
        DbPlaceholderParameter param2,
        DbPlaceholderParameter param3,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);


        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1, 
        DbPlaceholderParameter param2, 
        DbPlaceholderParameter param3, 
        DbPlaceholderParameter param4
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);


        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1,
        DbPlaceholderParameter param2,
        DbPlaceholderParameter param3,
        DbPlaceholderParameter param4,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);


        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1, 
        DbPlaceholderParameter param2, 
        DbPlaceholderParameter param3, 
        DbPlaceholderParameter param4, 
        DbPlaceholderParameter param5
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);

        var dbParam5 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param5.Name))
        {
            dbParam5.ParameterName = param5.Name;
        }
        dbParam5.Value = param5.Value;
        cmd.Parameters.Add(dbParam5);


        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1,
        DbPlaceholderParameter param2,
        DbPlaceholderParameter param3,
        DbPlaceholderParameter param4,
        DbPlaceholderParameter param5,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);

        var dbParam5 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param5.Name))
        {
            dbParam5.ParameterName = param5.Name;
        }
        dbParam5.Value = param5.Value;
        cmd.Parameters.Add(dbParam5);


        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1, 
        DbPlaceholderParameter param2, 
        DbPlaceholderParameter param3, 
        DbPlaceholderParameter param4, 
        DbPlaceholderParameter param5, 
        DbPlaceholderParameter param6
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);

        var dbParam5 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param5.Name))
        {
            dbParam5.ParameterName = param5.Name;
        }
        dbParam5.Value = param5.Value;
        cmd.Parameters.Add(dbParam5);

        var dbParam6 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param6.Name))
        {
            dbParam6.ParameterName = param6.Name;
        }
        dbParam6.Value = param6.Value;
        cmd.Parameters.Add(dbParam6);


        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1,
        DbPlaceholderParameter param2,
        DbPlaceholderParameter param3,
        DbPlaceholderParameter param4,
        DbPlaceholderParameter param5,
        DbPlaceholderParameter param6,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);

        var dbParam5 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param5.Name))
        {
            dbParam5.ParameterName = param5.Name;
        }
        dbParam5.Value = param5.Value;
        cmd.Parameters.Add(dbParam5);

        var dbParam6 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param6.Name))
        {
            dbParam6.ParameterName = param6.Name;
        }
        dbParam6.Value = param6.Value;
        cmd.Parameters.Add(dbParam6);


        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param7">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1, 
        DbPlaceholderParameter param2, 
        DbPlaceholderParameter param3, 
        DbPlaceholderParameter param4, 
        DbPlaceholderParameter param5, 
        DbPlaceholderParameter param6, 
        DbPlaceholderParameter param7
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);
        ArgumentNullException.ThrowIfNull(param7);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);

        var dbParam5 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param5.Name))
        {
            dbParam5.ParameterName = param5.Name;
        }
        dbParam5.Value = param5.Value;
        cmd.Parameters.Add(dbParam5);

        var dbParam6 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param6.Name))
        {
            dbParam6.ParameterName = param6.Name;
        }
        dbParam6.Value = param6.Value;
        cmd.Parameters.Add(dbParam6);

        var dbParam7 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param7.Name))
        {
            dbParam7.ParameterName = param7.Name;
        }
        dbParam7.Value = param7.Value;
        cmd.Parameters.Add(dbParam7);


        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param7">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1,
        DbPlaceholderParameter param2,
        DbPlaceholderParameter param3,
        DbPlaceholderParameter param4,
        DbPlaceholderParameter param5,
        DbPlaceholderParameter param6,
        DbPlaceholderParameter param7,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);
        ArgumentNullException.ThrowIfNull(param7);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);

        var dbParam5 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param5.Name))
        {
            dbParam5.ParameterName = param5.Name;
        }
        dbParam5.Value = param5.Value;
        cmd.Parameters.Add(dbParam5);

        var dbParam6 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param6.Name))
        {
            dbParam6.ParameterName = param6.Name;
        }
        dbParam6.Value = param6.Value;
        cmd.Parameters.Add(dbParam6);

        var dbParam7 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param7.Name))
        {
            dbParam7.ParameterName = param7.Name;
        }
        dbParam7.Value = param7.Value;
        cmd.Parameters.Add(dbParam7);


        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param7">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param8">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1, 
        DbPlaceholderParameter param2, 
        DbPlaceholderParameter param3, 
        DbPlaceholderParameter param4, 
        DbPlaceholderParameter param5, 
        DbPlaceholderParameter param6, 
        DbPlaceholderParameter param7, 
        DbPlaceholderParameter param8
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);
        ArgumentNullException.ThrowIfNull(param7);
        ArgumentNullException.ThrowIfNull(param8);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);

        var dbParam5 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param5.Name))
        {
            dbParam5.ParameterName = param5.Name;
        }
        dbParam5.Value = param5.Value;
        cmd.Parameters.Add(dbParam5);

        var dbParam6 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param6.Name))
        {
            dbParam6.ParameterName = param6.Name;
        }
        dbParam6.Value = param6.Value;
        cmd.Parameters.Add(dbParam6);

        var dbParam7 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param7.Name))
        {
            dbParam7.ParameterName = param7.Name;
        }
        dbParam7.Value = param7.Value;
        cmd.Parameters.Add(dbParam7);

        var dbParam8 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param8.Name))
        {
            dbParam8.ParameterName = param8.Name;
        }
        dbParam8.Value = param8.Value;
        cmd.Parameters.Add(dbParam8);


        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="DbConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param7">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param8">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbPlaceholderParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbConnection connection,
        string commandText,
        DbPlaceholderParameter param1,
        DbPlaceholderParameter param2,
        DbPlaceholderParameter param3,
        DbPlaceholderParameter param4,
        DbPlaceholderParameter param5,
        DbPlaceholderParameter param6,
        DbPlaceholderParameter param7,
        DbPlaceholderParameter param8,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);
        ArgumentNullException.ThrowIfNull(param7);
        ArgumentNullException.ThrowIfNull(param8);

        var cmd = connection.CreateCommand(commandText);
        var dbParam1 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param1.Name))
        {
            dbParam1.ParameterName = param1.Name;
        }
        dbParam1.Value = param1.Value;
        cmd.Parameters.Add(dbParam1);

        var dbParam2 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param2.Name))
        {
            dbParam2.ParameterName = param2.Name;
        }
        dbParam2.Value = param2.Value;
        cmd.Parameters.Add(dbParam2);

        var dbParam3 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param3.Name))
        {
            dbParam3.ParameterName = param3.Name;
        }
        dbParam3.Value = param3.Value;
        cmd.Parameters.Add(dbParam3);

        var dbParam4 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param4.Name))
        {
            dbParam4.ParameterName = param4.Name;
        }
        dbParam4.Value = param4.Value;
        cmd.Parameters.Add(dbParam4);

        var dbParam5 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param5.Name))
        {
            dbParam5.ParameterName = param5.Name;
        }
        dbParam5.Value = param5.Value;
        cmd.Parameters.Add(dbParam5);

        var dbParam6 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param6.Name))
        {
            dbParam6.ParameterName = param6.Name;
        }
        dbParam6.Value = param6.Value;
        cmd.Parameters.Add(dbParam6);

        var dbParam7 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param7.Name))
        {
            dbParam7.ParameterName = param7.Name;
        }
        dbParam7.Value = param7.Value;
        cmd.Parameters.Add(dbParam7);

        var dbParam8 = cmd.CreateParameter();
        if (!string.IsNullOrEmpty(param8.Name))
        {
            dbParam8.ParameterName = param8.Name;
        }
        dbParam8.Value = param8.Value;
        cmd.Parameters.Add(dbParam8);


        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

}
#endif