﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// DO NOT EDIT
// THIS FILE IS GENERATED BY DbDataSourceExtensions.Querty.tt

#if NET7_0_OR_GREATER
using System.CodeDom.Compiler;
using Nanorm;

namespace System.Data.Common;

/// <summary>
/// Extension methods for <see cref="DbDataSource"/> from the <c>Nanorm</c> package.
/// </summary>
[GeneratedCode("TextTemplatingFileGenerator", "1.0.0.0")]
public static partial class DbDataSourceExtensions
{
<# for (var i = 1; i <= 8; i++) { #>
    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="dataSource">The <see cref="DbDataSource"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
<#      for (var j = 1; j <= i; j++) { #>
    /// <param name="param<#= j #>">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
<#      } #>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbDataSource dataSource,
        string commandText,
<#          for (var j = 1; j <= i; j++) {
                var paramNum = j < i ? j.ToString() + ", " : j.ToString();
#>
        DbParameter param<#= paramNum #>
<#          } #>
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(dataSource);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
<#          for (var j = 1; j <= i; j++) { #>
        ArgumentNullException.ThrowIfNull(param<#= j #>);
<#          } #>

        var cmd = dataSource.CreateCommand(commandText);
<#          for (var j = 1; j <= i; j++) { #>
        cmd.Parameters.Add(param<#= j #>);
<#          } #>

        return cmd.QuerySingleAsyncImpl<T>(default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="dataSource">The <see cref="DbDataSource"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
<#      for (var j = 1; j <= i; j++) { #>
    /// <param name="param<#= j #>">
    /// A parameter to use when executing the command text. Use the <see cref="DbParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="DbParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
<#      } #>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this DbDataSource dataSource,
        string commandText,
<#          for (var j = 1; j <= i; j++) { #>
        DbParameter param<#= j #>,
<#          } #>
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(dataSource);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
<#          for (var j = 1; j <= i; j++) { #>
        ArgumentNullException.ThrowIfNull(param<#= j #>);
<#          } #>

        var cmd = dataSource.CreateCommand(commandText);
<#          for (var j = 1; j <= i; j++) { #>
        cmd.Parameters.Add(param<#= j #>);
<#          } #>

        return cmd.QuerySingleAsyncImpl<T>(cancellationToken);
    }

<# } #>
}
#endif