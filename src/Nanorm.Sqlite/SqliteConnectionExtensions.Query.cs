// DO NOT EDIT
// THIS FILE IS GENERATED BY SqliteConnectionExtensions.Query.tt

#if NET7_0_OR_GREATER
using System.CodeDom.Compiler;
using Nanorm.Sqlite;

namespace Microsoft.Data.Sqlite;

/// <summary>
/// Extension methods for <see cref="SqliteConnection"/> from the <c>Nanorm</c> package.
/// </summary>
[GeneratedCode("TextTemplatingFileGenerator", "1.0.0.0")]
public static partial class SqliteConnectionExtensions
{
    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);

        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);

        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1, 
        SqliteParameter param2
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);

        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1,
        SqliteParameter param2,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);

        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1, 
        SqliteParameter param2, 
        SqliteParameter param3
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);

        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1,
        SqliteParameter param2,
        SqliteParameter param3,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);

        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1, 
        SqliteParameter param2, 
        SqliteParameter param3, 
        SqliteParameter param4
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);

        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1,
        SqliteParameter param2,
        SqliteParameter param3,
        SqliteParameter param4,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);

        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1, 
        SqliteParameter param2, 
        SqliteParameter param3, 
        SqliteParameter param4, 
        SqliteParameter param5
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);
        cmd.Parameters.Add(param5);

        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1,
        SqliteParameter param2,
        SqliteParameter param3,
        SqliteParameter param4,
        SqliteParameter param5,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);
        cmd.Parameters.Add(param5);

        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1, 
        SqliteParameter param2, 
        SqliteParameter param3, 
        SqliteParameter param4, 
        SqliteParameter param5, 
        SqliteParameter param6
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);
        cmd.Parameters.Add(param5);
        cmd.Parameters.Add(param6);

        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1,
        SqliteParameter param2,
        SqliteParameter param3,
        SqliteParameter param4,
        SqliteParameter param5,
        SqliteParameter param6,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);
        cmd.Parameters.Add(param5);
        cmd.Parameters.Add(param6);

        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param7">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1, 
        SqliteParameter param2, 
        SqliteParameter param3, 
        SqliteParameter param4, 
        SqliteParameter param5, 
        SqliteParameter param6, 
        SqliteParameter param7
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);
        ArgumentNullException.ThrowIfNull(param7);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);
        cmd.Parameters.Add(param5);
        cmd.Parameters.Add(param6);
        cmd.Parameters.Add(param7);

        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param7">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1,
        SqliteParameter param2,
        SqliteParameter param3,
        SqliteParameter param4,
        SqliteParameter param5,
        SqliteParameter param6,
        SqliteParameter param7,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);
        ArgumentNullException.ThrowIfNull(param7);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);
        cmd.Parameters.Add(param5);
        cmd.Parameters.Add(param6);
        cmd.Parameters.Add(param7);

        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param7">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param8">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1, 
        SqliteParameter param2, 
        SqliteParameter param3, 
        SqliteParameter param4, 
        SqliteParameter param5, 
        SqliteParameter param6, 
        SqliteParameter param7, 
        SqliteParameter param8
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);
        ArgumentNullException.ThrowIfNull(param7);
        ArgumentNullException.ThrowIfNull(param8);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);
        cmd.Parameters.Add(param5);
        cmd.Parameters.Add(param6);
        cmd.Parameters.Add(param7);
        cmd.Parameters.Add(param8);

        return cmd.QuerySingleAsyncImpl<T>(connection, default);
    }

    /// <summary>
    /// Executes a command maps the first row returned to an instance of <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type the result is being map to.</typeparam>
    /// <param name="connection">The <see cref="SqliteConnection"/>.</param>
    /// <param name="commandText">The SQL command text.</param>
    /// <param name="param1">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param2">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param3">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param4">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param5">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param6">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param7">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="param8">
    /// A parameter to use when executing the command text. Use the <see cref="SqliteParameterExtensions.AsDbParameter"/>
    /// method to convert values to <see cref="SqliteParameter"/>, e.g. <c>myValue.AsDbParameter()</c>.
    /// </param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A task representing the asynchronous operation with the mapped <typeparamref name="T"/>.</returns>
    public static Task<T?> QuerySingleAsync<T>(
        this SqliteConnection connection,
        string commandText,
        SqliteParameter param1,
        SqliteParameter param2,
        SqliteParameter param3,
        SqliteParameter param4,
        SqliteParameter param5,
        SqliteParameter param6,
        SqliteParameter param7,
        SqliteParameter param8,
        CancellationToken cancellationToken
        )
        where T : IDataReaderMapper<T>
    {
        ArgumentNullException.ThrowIfNull(connection);
        ExceptionHelpers.ThrowIfNullOrEmpty(commandText);
        ArgumentNullException.ThrowIfNull(param1);
        ArgumentNullException.ThrowIfNull(param2);
        ArgumentNullException.ThrowIfNull(param3);
        ArgumentNullException.ThrowIfNull(param4);
        ArgumentNullException.ThrowIfNull(param5);
        ArgumentNullException.ThrowIfNull(param6);
        ArgumentNullException.ThrowIfNull(param7);
        ArgumentNullException.ThrowIfNull(param8);

        var cmd = connection.CreateCommand(commandText);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
        cmd.Parameters.Add(param3);
        cmd.Parameters.Add(param4);
        cmd.Parameters.Add(param5);
        cmd.Parameters.Add(param6);
        cmd.Parameters.Add(param7);
        cmd.Parameters.Add(param8);

        return cmd.QuerySingleAsyncImpl<T>(connection, cancellationToken);
    }

}
#endif